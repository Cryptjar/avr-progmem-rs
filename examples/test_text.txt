This crate is specifically for AVR-base micro-controllers such as
the Arduino Uno (and some other Arduino boards, but not all), which have a
modified Harvard architecture that is the strict separation between program
code and data, while having special instruction to read and write to the
program memory.   

While all ordinary data is stored of course in the data domain, where it is
perfectly usable, the harsh constraints of most AVR processors make it very
appealing to use the program memory (also referred to as _progmem_) for
storing constant values. However, due to the Harvard design those values
are not usable with normal instructions (i.e. those emitted from normal
Rust code). Instead, special instructions are required to loaded data from
the program code domain, i.e. the `lpm` (load _from_ program memory)
instruction. And because there is no way to emit it from Rust code, this
crate uses inline assembly to emit that instruction.

However, since there is nothing special about a pointer into program code
which would differentiate it from normal data pointers it is entirely up to
the programmer to ensure that these different 'pointer-type' are not
accidentally mixed. In other words it is `unsafe` in the context of Rust.
